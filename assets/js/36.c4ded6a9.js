(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{419:function(t,s,a){"use strict";a.r(s);var n=a(48),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"str"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#str"}},[t._v("#")]),t._v(" Str")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Chevere\\Components\\Str")]),t._v(" namespace provides components that interact with strings, allowing "),a("a",{attrs:{href:"#manipulation"}},[t._v("manipulation")]),t._v(", "),a("a",{attrs:{href:"#asserting"}},[t._v("asserting")]),t._v(" and "),a("a",{attrs:{href:"#boolean-checking"}},[t._v("boolean checking")]),t._v(" for strings.")]),t._v(" "),a("h2",{attrs:{id:"manipulation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#manipulation"}},[t._v("#")]),t._v(" Manipulation")]),t._v(" "),a("p",[t._v("Manipulating strings refers to the process of altering an argument of type "),a("code",[t._v("string")]),t._v(".")]),t._v(" "),a("p",[t._v("The "),a("RouterLink",{attrs:{to:"/reference/Chevere/Components/Str/Str.html"}},[t._v("Str")]),t._v(" component in charge of string manipulation.")],1),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token package"}},[t._v("Chevere"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Components"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$str")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'  THE STRING  '")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("lowercase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("stripWhitespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$result")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$str")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// = "thestring";')]),t._v("\n")])])]),a("p",[t._v("In the code above, "),a("code",[t._v("THE STRING")]),t._v(" is manipulated  to result in "),a("code",[t._v("thestring")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"asserting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#asserting"}},[t._v("#")]),t._v(" Asserting")]),t._v(" "),a("p",[t._v("Asserting strings refers to the process of asserting an argument of type "),a("code",[t._v("string")]),t._v(" against methods that throws "),a("code",[t._v("Throwable")]),t._v(" when failing to assert.")]),t._v(" "),a("h3",{attrs:{id:"strassert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strassert"}},[t._v("#")]),t._v(" StrAssert")]),t._v(" "),a("p",[t._v("The "),a("RouterLink",{attrs:{to:"/reference/Chevere/Components/Str/StrAssert.html"}},[t._v("StrAssert")]),t._v("  component in charge of string asserting.")],1),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token package"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name class-name-fully-qualified"}},[t._v("Chevere"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Components"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("StrAssert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StrAssert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'A String'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notEmpty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string isn't empty")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notCtypeSpace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Throws StrCtypeSpaceException")]),t._v("\n")])])]),a("p",[t._v("In the code above, executing "),a("code",[t._v("notEmpty")]),t._v(" won't raise any exception as "),a("code",[t._v("$string")]),t._v(" is not empty, but executing "),a("code",[t._v("notCtypeSpace")]),t._v(" will raise an exception as "),a("code",[t._v("$string")]),t._v(" contains c-type spaces.")]),t._v(" "),a("h2",{attrs:{id:"boolean-checking"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-checking"}},[t._v("#")]),t._v(" Boolean checking")]),t._v(" "),a("p",[t._v("Bool string refers to the process of validate an argument of type "),a("code",[t._v("string")]),t._v(" against methods that returns "),a("code",[t._v("bool")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"strbool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#strbool"}},[t._v("#")]),t._v(" StrBool")]),t._v(" "),a("p",[t._v("The "),a("RouterLink",{attrs:{to:"/reference/Chevere/Components/Str/StrBool.html"}},[t._v("StrBool")]),t._v(" component in charge of string validation.")],1),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token package"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name class-name-fully-qualified"}},[t._v("Chevere"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Components"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("StrBool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Chévere es magnífico!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$strBool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StrBool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$strBool")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Rodo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$strBool")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'es'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$strBool")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Chévere'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("In the code above, "),a("code",[t._v("endsWith")]),t._v(" returns "),a("code",[t._v("false")]),t._v(" as "),a("code",[t._v("$string")]),t._v(" doesn't ends with "),a("code",[t._v("Rodo")]),t._v(". Passing "),a("code",[t._v("es")]),t._v(" to "),a("code",[t._v("contains")]),t._v(" method and passing "),a("code",[t._v("Chévere")]),t._v(" to "),a("code",[t._v("startsWith")]),t._v(" method returns true as the conditions are meet.")])])}),[],!1,null,null,null);s.default=e.exports}}]);